Service: Services are really just "containers in production". A service only runs one image,
     but it codifies the way that image runs-what ports it should use, how many
     replicas of the container should run so the service has the capacity it needs, and so on.

version:

image: Specify the image to start the container from. Can either be a repository/tag or a partial image ID.
    For example, "image: redis" or "image: ubuntu:14.04"
    If the image does not exist, compose attempts to pull it, unless you have also specified build, in which case it builds
    is using the specified options and tags it with the specified tag.

container_name: Specify a custom container name, rather than a generated default name. Because Docker container names must be
    unique, you cannot scale a service beyond 1 container if you have specified a custom name.

restart: "no" is the default restart policy, and it will not restart a container under any circumstance. When "always" is
    specified, the container alwasys restarts. The "on-failure" policy restarts a container if the exit code indicates an
    on-failure error.

ports: Expose ports. Either specify both ports (HOST:CONTAINER), or just the container port(a random host port will be chosen).
    Note: When mapping ports in the HOST:CONTAINER format, you may experience erroneous results when using a container port lower
    than 60, because YAML will parse numbers in the format xx:yy as sexagesimal(base 60). For this reason, we recommend always
    explicitly specifying your port mappings as string.

    For example:
    ports:
      - "80:80"

volumes: Mount paths or named volumes, optionally specifying a path on the host machine (HOST:CONTAINER), or an access mode
    (HOST:CONTAINER). For v2 files, named volumes need to be specified with the top-level "volumes" key.
    For example:
    volumes:
      # Just specify a path and let the Engine create a volume
      - /var/lib/mysql

      # Specify an absolute path mapping
      - /opt/data:/var/lib/mysql

      # Path on the host, relative to the Compose file
      - ./cache:/tmp/cache

      # User-relative path
      - ~/configs:/etc/configs/:ro

      # Named volume
      - datavolume:/var/lib/mysql

volumes-from: Mount all of the volumes from another service or container, optionally specifying ro or rw access. If no access
    is specified, then rw will be used.

entrypoint: The "ENTRYPOINT" specifies a command that will always be executed when the container starts. The "CMD" specifies
    arguments that will be fed to the ENTRYPOINT. Override the default entrypoint. Docker has a default entrypoint which is "/bin/sh -c" but does not have a default
    command. When you run docker like this: "docker run -i -t ubuntu bash" the entrypoint is the default "/bin/sh -c", the image
    is ubuntu and the command is bash. This command is run via the entrypoint, i.e, the actual thing that gets executed is
    "/bin/sh -c bash". The allowed docker to implement RUN quickly by relying on the shell's parser. Later on, people asked to
    be able to customize this so ENTRYPOINT and -entrypoint has been introduced.

    For example:
    CMD is the default argument to container. Without entrypoint, default argument is command that is executed. With entrypoint,
    cmd is passed to entrypoint as argument. You can emulate a command with entrypoint.
    # No entrypoint
    docker run ubuntu /bin/cat /etc/passwd
    # With entry point, emulating cat command
    docker run --entrypoint="/bin/cat" ubuntu /etc/passwd

    So, main advantage is that with entrypoint you can pass arguments to your container.
